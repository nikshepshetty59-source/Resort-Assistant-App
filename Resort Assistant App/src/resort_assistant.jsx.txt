import React, { useState, useEffect, createContext, useContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, addDoc, getDocs } from 'firebase/firestore';
import { setLogLevel } from 'firebase/firestore';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { LayoutDashboard, IndianRupee, Utensils, BellRing, HandPlatter } from 'lucide-react';

// Define Firebase and User Context
const FirebaseContext = createContext(null);

const App = () => {
  const [app, setApp] = useState(null);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState('');
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState('success');

  const showCustomModal = (message) => {
    setModalContent(message);
    setShowModal(true);
  };

  const showCustomToast = (message, type = 'success') => {
    setToastMessage(message);
    setToastType(type);
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);
  };

  useEffect(() => {
    // Check if the variables are defined in the environment
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    let firebaseConfig = null;
    try {
      firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
    } catch (e) {
      console.error("Failed to parse firebase config:", e);
    }
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    if (firebaseConfig) {
      try {
        const firebaseApp = initializeApp(firebaseConfig);
        const firestoreDb = getFirestore(firebaseApp);
        const firebaseAuth = getAuth(firebaseApp);

        setApp(firebaseApp);
        setDb(firestoreDb);
        setAuth(firebaseAuth);

        const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
          if (user) {
            setUserId(user.uid);
            showCustomToast('Signed in successfully!', 'success');
          } else {
            // Sign in with custom token or anonymously if not available
            if (initialAuthToken) {
              await signInWithCustomToken(firebaseAuth, initialAuthToken)
                .then(() => showCustomToast('Signed in with custom token!', 'success'))
                .catch(error => {
                  console.error("Error signing in with custom token:", error);
                  showCustomToast('Failed to sign in. Please try again.', 'error');
                });
            } else {
              await signInAnonymously(firebaseAuth)
                .then(() => {
                  setUserId(firebaseAuth.currentUser.uid);
                  showCustomToast('Signed in anonymously!', 'success');
                })
                .catch(error => {
                  console.error("Error signing in anonymously:", error);
                  showCustomToast('Failed to sign in. Please try again.', 'error');
                });
            }
          }
          setLoading(false);
        });

        // Cleanup the listener on component unmount
        return () => unsubscribe();
      } catch (e) {
        console.error("Firebase initialization error:", e);
        showCustomToast('Error initializing Firebase.', 'error');
        setLoading(false);
      }
    } else {
      console.error("Firebase config is not available.");
      setLoading(false);
    }
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-100">
        <div className="text-xl font-semibold text-gray-700">Loading...</div>
      </div>
    );
  }

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return <Dashboard />;
      case 'finance':
        return <FinanceTracker />;
      case 'kitchen':
        return <Inventory type="kitchen" />;
      case 'housekeeping':
        return <Inventory type="housekeeping" />;
      case 'reminders':
        return <Reminders />;
      default:
        return <Dashboard />;
    }
  };

  return (
    <FirebaseContext.Provider value={{ db, userId }}>
      <div className="bg-gray-100 min-h-screen flex flex-col items-center p-4 font-inter">
        {/* Toast Notification */}
        {showToast && (
          <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-xl text-white transition-opacity duration-300 ${toastType === 'success' ? 'bg-green-500' : 'bg-red-500'} animate-fade-in`}>
            {toastMessage}
          </div>
        )}

        {/* Custom Modal */}
        {showModal && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-2xl max-w-sm w-full text-center">
              <p className="text-lg font-medium mb-4">{modalContent}</p>
              <button
                onClick={() => setShowModal(false)}
                className="bg-gray-800 text-white px-4 py-2 rounded-full hover:bg-gray-700 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        )}

        <div className="w-full max-w-6xl bg-white rounded-2xl shadow-lg p-6 flex flex-col">
          <header className="mb-6 pb-4 border-b border-gray-200">
            <div className="flex justify-between items-center mb-2">
                <h1 className="text-4xl font-bold text-gray-800">Resort Assistant</h1>
                <span className="text-xs text-gray-500 mt-2">User ID: {userId || 'N/A'}</span>
            </div>
          </header>

          <nav className="mb-6">
            <ul className="flex flex-wrap gap-2 sm:gap-4 justify-center">
              <li>
                <button
                  onClick={() => setActiveTab('dashboard')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${activeTab === 'dashboard' ? 'bg-yellow-500 text-gray-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  <LayoutDashboard size={18} /> Dashboard
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActiveTab('finance')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${activeTab === 'finance' ? 'bg-yellow-500 text-gray-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  <IndianRupee size={18} /> Finances
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActiveTab('kitchen')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${activeTab === 'kitchen' ? 'bg-yellow-500 text-gray-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  <Utensils size={18} /> Kitchen
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActiveTab('housekeeping')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${activeTab === 'housekeeping' ? 'bg-yellow-500 text-gray-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  <HandPlatter size={18} /> Housekeeping
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActiveTab('reminders')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${activeTab === 'reminders' ? 'bg-yellow-500 text-gray-800' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  <BellRing size={18} /> Reminders
                </button>
              </li>
            </ul>
          </nav>

          <main className="flex-grow p-4 bg-gray-50 rounded-lg shadow-inner">
            {renderContent()}
          </main>
        </div>
      </div>
    </FirebaseContext.Provider>
  );
};

const Dashboard = () => {
  const { db, userId } = useContext(FirebaseContext);
  const [financeSummary, setFinanceSummary] = useState({ income: 0, expenses: 0, net: 0 });
  const [financeData, setFinanceData] = useState([]);
  const [inventorySummary, setInventorySummary] = useState({ kitchen: 0, housekeeping: 0 });
  const [upcomingReminders, setUpcomingReminders] = useState([]);

  useEffect(() => {
    if (!db || !userId) return;

    // Fetch finance summary
    const financeQuery = query(collection(db, `artifacts/${__app_id}/users/${userId}/finance_transactions`));
    const unsubscribeFinance = onSnapshot(financeQuery, (snapshot) => {
      let income = 0;
      let expenses = 0;
      const dailyData = {};
      snapshot.forEach(doc => {
        const data = doc.data();
        const date = data.date.toDate().toLocaleDateString();
        if (!dailyData[date]) {
          dailyData[date] = { date, income: 0, expenses: 0 };
        }
        if (data.type === 'income') {
          income += data.amount;
          dailyData[date].income += data.amount;
        } else if (data.type === 'expense') {
          expenses += data.amount;
          dailyData[date].expenses += data.amount;
        }
      });
      setFinanceSummary({ income, expenses, net: income - expenses });
      setFinanceData(Object.values(dailyData).sort((a, b) => new Date(a.date) - new Date(b.date)));
    }, (error) => {
      console.error("Error fetching finance summary:", error);
    });

    // Fetch inventory summary
    const kitchenQuery = query(collection(db, `artifacts/${__app_id}/users/${userId}/kitchen_inventory`));
    const housekeepingQuery = query(collection(db, `artifacts/${__app_id}/users/${userId}/housekeeping_inventory`));

    const unsubscribeKitchen = onSnapshot(kitchenQuery, (snapshot) => {
      setInventorySummary(prev => ({ ...prev, kitchen: snapshot.docs.length }));
    }, (error) => {
      console.error("Error fetching kitchen summary:", error);
    });

    const unsubscribeHousekeeping = onSnapshot(housekeepingQuery, (snapshot) => {
      setInventorySummary(prev => ({ ...prev, housekeeping: snapshot.docs.length }));
    }, (error) => {
      console.error("Error fetching housekeeping summary:", error);
    });

    // Fetch upcoming reminders (due in the next 30 days)
    const thirtyDaysFromNow = new Date();
    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
    const remindersQuery = query(collection(db, `artifacts/${__app_id}/users/${userId}/reminders`));
    const unsubscribeReminders = onSnapshot(remindersQuery, (snapshot) => {
      const reminders = [];
      snapshot.forEach(doc => {
        const data = doc.data();
        const dueDate = data.dueDate instanceof Date ? data.dueDate : data.dueDate.toDate();
        if (dueDate >= new Date() && dueDate <= thirtyDaysFromNow) {
          reminders.push({ id: doc.id, ...data, dueDate: dueDate.toLocaleDateString() });
        }
      });
      // Sort reminders by due date
      reminders.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
      setUpcomingReminders(reminders);
    }, (error) => {
      console.error("Error fetching reminders:", error);
    });

    // Cleanup listeners on unmount
    return () => {
      unsubscribeFinance();
      unsubscribeKitchen();
      unsubscribeHousekeeping();
      unsubscribeReminders();
    };
  }, [db, userId]);

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Overview Dashboard</h2>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Financial Summary Card */}
        <div className="bg-white rounded-xl shadow p-6 lg:col-span-1">
          <h3 className="text-lg font-semibold text-gray-700 mb-2">Financial Summary</h3>
          <div className="space-y-2">
            <p className="flex justify-between items-center text-green-600"><span className="font-medium">Total Income:</span> <span className="text-xl font-bold">${financeSummary.income.toFixed(2)}</span></p>
            <p className="flex justify-between items-center text-red-600"><span className="font-medium">Total Expenses:</span> <span className="text-xl font-bold">${financeSummary.expenses.toFixed(2)}</span></p>
            <p className="flex justify-between items-center text-gray-800 border-t pt-2 mt-2 font-bold"><span className="font-medium">Net Revenue:</span> <span className="text-2xl">${financeSummary.net.toFixed(2)}</span></p>
          </div>
        </div>
        {/* Inventory Summary Card */}
        <div className="bg-white rounded-xl shadow p-6 lg:col-span-1">
          <h3 className="text-lg font-semibold text-gray-700 mb-2">Inventory Summary</h3>
          <div className="space-y-2">
            <p className="flex justify-between items-center"><span className="font-medium">Kitchen Items:</span> <span className="text-xl font-bold text-yellow-500">{inventorySummary.kitchen}</span></p>
            <p className="flex justify-between items-center"><span className="font-medium">Housekeeping Items:</span> <span className="text-xl font-bold text-yellow-500">{inventorySummary.housekeeping}</span></p>
          </div>
        </div>
        {/* Upcoming Reminders Card */}
        <div className="bg-white rounded-xl shadow p-6 lg:col-span-1">
          <h3 className="text-lg font-semibold text-gray-700 mb-2">Upcoming Reminders</h3>
          {upcomingReminders.length > 0 ? (
            <ul className="space-y-2">
              {upcomingReminders.map(reminder => (
                <li key={reminder.id} className="p-2 bg-gray-100 rounded-lg">
                  <p className="font-medium">{reminder.title}</p>
                  <p className="text-sm text-gray-600">Due: {reminder.dueDate}</p>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-sm text-gray-500">No upcoming reminders in the next 30 days.</p>
          )}
        </div>
      </div>
      {/* Financial Chart */}
      <div className="bg-white rounded-xl shadow p-6">
        <h3 className="text-lg font-semibold text-gray-700 mb-4">Daily Financial Overview</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={financeData}>
            <XAxis dataKey="date" stroke="#888888" />
            <YAxis stroke="#888888" />
            <Tooltip />
            <Legend />
            <Bar dataKey="income" fill="#84cc16" name="Income" />
            <Bar dataKey="expenses" fill="#ef4444" name="Expenses" />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

const FinanceTracker = () => {
  const { db, userId } = useContext(FirebaseContext);
  const [transactions, setTransactions] = useState([]);
  const [amount, setAmount] = useState('');
  const [type, setType] = useState('income');
  const [description, setDescription] = useState('');
  const [isAdding, setIsAdding] = useState(false);

  useEffect(() => {
    if (!db || !userId) return;

    const transactionsRef = collection(db, `artifacts/${__app_id}/users/${userId}/finance_transactions`);
    const q = query(transactionsRef);

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      data.sort((a, b) => b.date.toDate() - a.date.toDate()); // Sort by date descending
      setTransactions(data);
    }, (error) => {
      console.error("Error fetching finance transactions:", error);
    });

    return () => unsubscribe();
  }, [db, userId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!db || !userId || !amount || !description) return;
    setIsAdding(true);
    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/finance_transactions`), {
        amount: parseFloat(amount),
        type,
        description,
        date: new Date(),
        userId
      });
      setAmount('');
      setDescription('');
    } catch (e) {
      console.error("Error adding document: ", e);
    } finally {
      setIsAdding(false);
    }
  };

  const handleDelete = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/finance_transactions`, id));
    } catch (e) {
      console.error("Error deleting document: ", e);
    }
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Finances: Income & Expenses</h2>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-xl shadow space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="flex flex-col">
            <label htmlFor="amount" className="font-medium text-gray-700 mb-1">Amount</label>
            <input
              type="number"
              id="amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="e.g., 500"
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="type" className="font-medium text-gray-700 mb-1">Type</label>
            <select
              id="type"
              value={type}
              onChange={(e) => setType(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            >
              <option value="income">Income</option>
              <option value="expense">Expense</option>
            </select>
          </div>
          <div className="flex flex-col">
            <label htmlFor="description" className="font-medium text-gray-700 mb-1">Description</label>
            <input
              type="text"
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="e.g., Guest Room Revenue"
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
        </div>
        <button
          type="submit"
          disabled={isAdding}
          className="w-full bg-yellow-500 text-gray-800 p-3 rounded-lg font-bold hover:bg-yellow-600 transition-colors disabled:bg-gray-400"
        >
          {isAdding ? 'Adding...' : 'Add Transaction'}
        </button>
      </form>

      <div className="space-y-4">
        <h3 className="text-xl font-semibold text-gray-800">Transaction History</h3>
        {transactions.length > 0 ? (
          <div className="bg-white p-4 rounded-xl shadow overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead>
                <tr className="bg-gray-100 text-gray-600 text-sm leading-normal">
                  <th className="py-3 px-6 text-left">Date</th>
                  <th className="py-3 px-6 text-left">Description</th>
                  <th className="py-3 px-6 text-left">Type</th>
                  <th className="py-3 px-6 text-right">Amount</th>
                  <th className="py-3 px-6 text-right">Actions</th>
                </tr>
              </thead>
              <tbody className="text-gray-600 text-sm font-light">
                {transactions.map(t => (
                  <tr key={t.id} className="border-b border-gray-200 hover:bg-gray-50">
                    <td className="py-3 px-6 text-left whitespace-nowrap">{t.date.toDate().toLocaleDateString()}</td>
                    <td className="py-3 px-6 text-left">{t.description}</td>
                    <td className={`py-3 px-6 text-left font-medium ${t.type === 'income' ? 'text-green-500' : 'text-red-500'}`}>{t.type}</td>
                    <td className="py-3 px-6 text-right">${t.amount.toFixed(2)}</td>
                    <td className="py-3 px-6 text-right">
                      <button onClick={() => handleDelete(t.id)} className="text-red-500 hover:text-red-700 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 112 0v6a1 1 0 11-2 0V8z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-center text-gray-500">No transactions recorded yet.</p>
        )}
      </div>
    </div>
  );
};

const Inventory = ({ type }) => {
  const { db, userId } = useContext(FirebaseContext);
  const [items, setItems] = useState([]);
  const [name, setName] = useState('');
  const [quantity, setQuantity] = useState('');
  const [unit, setUnit] = useState('');
  const [isAdding, setIsAdding] = useState(false);
  const collectionName = type === 'kitchen' ? 'kitchen_inventory' : 'housekeeping_inventory';
  const title = type === 'kitchen' ? 'Kitchen Inventory' : 'Housekeeping & Amenities';
  const placeholder = type === 'kitchen' ? 'e.g., Basmati Rice' : 'e.g., Guest Soap';

  useEffect(() => {
    if (!db || !userId) return;
    const inventoryRef = collection(db, `artifacts/${__app_id}/users/${userId}/${collectionName}`);
    const q = query(inventoryRef);

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setItems(data);
    }, (error) => {
      console.error(`Error fetching ${type} inventory:`, error);
    });

    return () => unsubscribe();
  }, [db, userId, collectionName]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!db || !userId || !name || !quantity) return;
    setIsAdding(true);
    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/${collectionName}`), {
        name,
        quantity: parseFloat(quantity),
        unit,
        userId
      });
      setName('');
      setQuantity('');
      setUnit('');
    } catch (e) {
      console.error("Error adding document: ", e);
    } finally {
      setIsAdding(false);
    }
  };

  const handleDelete = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/${collectionName}`, id));
    } catch (e) {
      console.error("Error deleting document: ", e);
    }
  };

  const LOW_STOCK_THRESHOLD = 10;

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">{title}</h2>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-xl shadow space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="flex flex-col">
            <label htmlFor="itemName" className="font-medium text-gray-700 mb-1">Item Name</label>
            <input
              type="text"
              id="itemName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder={placeholder}
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="quantity" className="font-medium text-gray-700 mb-1">Quantity</label>
            <input
              type="number"
              id="quantity"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
              placeholder="e.g., 50"
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="unit" className="font-medium text-gray-700 mb-1">Unit</label>
            <input
              type="text"
              id="unit"
              value={unit}
              onChange={(e) => setUnit(e.target.value)}
              placeholder="e.g., kg, pieces"
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
        </div>
        <button
          type="submit"
          disabled={isAdding}
          className="w-full bg-yellow-500 text-gray-800 p-3 rounded-lg font-bold hover:bg-yellow-600 transition-colors disabled:bg-gray-400"
        >
          {isAdding ? 'Adding...' : 'Add Item'}
        </button>
      </form>

      <div className="space-y-4">
        <h3 className="text-xl font-semibold text-gray-800">Current Inventory</h3>
        {items.length > 0 ? (
          <div className="bg-white p-4 rounded-xl shadow overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead>
                <tr className="bg-gray-100 text-gray-600 text-sm leading-normal">
                  <th className="py-3 px-6 text-left">Item Name</th>
                  <th className="py-3 px-6 text-left">Quantity</th>
                  <th className="py-3 px-6 text-left">Unit</th>
                  <th className="py-3 px-6 text-right">Actions</th>
                </tr>
              </thead>
              <tbody className="text-gray-600 text-sm font-light">
                {items.map(item => (
                  <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-50">
                    <td className="py-3 px-6 text-left">{item.name}</td>
                    <td className={`py-3 px-6 text-left ${item.quantity <= LOW_STOCK_THRESHOLD ? 'text-red-500 font-bold' : ''}`}>
                      {item.quantity} {item.quantity <= LOW_STOCK_THRESHOLD && <span className="text-xs ml-2">(Low Stock)</span>}
                    </td>
                    <td className="py-3 px-6 text-left">{item.unit}</td>
                    <td className="py-3 px-6 text-right">
                      <button onClick={() => handleDelete(item.id)} className="text-red-500 hover:text-red-700 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 112 0v6a1 1 0 11-2 0V8z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-center text-gray-500">No items in inventory yet.</p>
        )}
      </div>
    </div>
  );
};

const Reminders = () => {
  const { db, userId } = useContext(FirebaseContext);
  const [reminders, setReminders] = useState([]);
  const [title, setTitle] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [vendor, setVendor] = useState('');
  const [isAdding, setIsAdding] = useState(false);

  useEffect(() => {
    if (!db || !userId) return;
    const remindersRef = collection(db, `artifacts/${__app_id}/users/${userId}/reminders`);
    const q = query(remindersRef);

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      data.sort((a, b) => a.dueDate.toDate() - b.dueDate.toDate()); // Sort by date ascending
      setReminders(data);
    }, (error) => {
      console.error("Error fetching reminders:", error);
    });

    return () => unsubscribe();
  }, [db, userId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!db || !userId || !title || !dueDate) return;
    setIsAdding(true);
    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/reminders`), {
        title,
        dueDate: new Date(dueDate),
        vendor,
        isCompleted: false,
        userId
      });
      setTitle('');
      setDueDate('');
      setVendor('');
    } catch (e) {
      console.error("Error adding document: ", e);
    } finally {
      setIsAdding(false);
    }
  };

  const handleToggleComplete = async (id, isCompleted) => {
    if (!db || !userId) return;
    try {
      await updateDoc(doc(db, `artifacts/${__app_id}/users/${userId}/reminders`, id), {
        isCompleted: !isCompleted
      });
    } catch (e) {
      console.error("Error updating document: ", e);
    }
  };

  const handleDelete = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/reminders`, id));
    } catch (e) {
      console.error("Error deleting document: ", e);
    }
  };

  const getStatusColor = (dueDate) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = due - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays <= 7 && diffDays >= 0) {
      return 'text-red-500';
    }
    return 'text-green-500';
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Reminders: Payments & Dues</h2>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-xl shadow space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="flex flex-col">
            <label htmlFor="reminderTitle" className="font-medium text-gray-700 mb-1">Title</label>
            <input
              type="text"
              id="reminderTitle"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="e.g., Monthly Rent"
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="dueDate" className="font-medium text-gray-700 mb-1">Due Date</label>
            <input
              type="date"
              id="dueDate"
              value={dueDate}
              onChange={(e) => setDueDate(e.target.value)}
              required
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="vendor" className="font-medium text-gray-700 mb-1">Vendor (Optional)</label>
            <input
              type="text"
              id="vendor"
              value={vendor}
              onChange={(e) => setVendor(e.target.value)}
              placeholder="e.g., Power Company"
              className="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
          </div>
        </div>
        <button
          type="submit"
          disabled={isAdding}
          className="w-full bg-yellow-500 text-gray-800 p-3 rounded-lg font-bold hover:bg-yellow-600 transition-colors disabled:bg-gray-400"
        >
          {isAdding ? 'Adding...' : 'Add Reminder'}
        </button>
      </form>

      <div className="space-y-4">
        <h3 className="text-xl font-semibold text-gray-800">Your Reminders</h3>
        {reminders.length > 0 ? (
          <div className="bg-white p-4 rounded-xl shadow overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead>
                <tr className="bg-gray-100 text-gray-600 text-sm leading-normal">
                  <th className="py-3 px-6 text-left">Title</th>
                  <th className="py-3 px-6 text-left">Due Date</th>
                  <th className="py-3 px-6 text-left">Vendor</th>
                  <th className="py-3 px-6 text-center">Status</th>
                  <th className="py-3 px-6 text-right">Actions</th>
                </tr>
              </thead>
              <tbody className="text-gray-600 text-sm font-light">
                {reminders.map(r => (
                  <tr key={r.id} className="border-b border-gray-200 hover:bg-gray-50">
                    <td className={`py-3 px-6 text-left font-medium ${r.isCompleted ? 'line-through text-gray-500' : ''}`}>{r.title}</td>
                    <td className={`py-3 px-6 text-left ${getStatusColor(r.dueDate.toDate())}`}>{r.dueDate.toDate().toLocaleDateString()}</td>
                    <td className="py-3 px-6 text-left">{r.vendor}</td>
                    <td className="py-3 px-6 text-center">
                      <input
                        type="checkbox"
                        checked={r.isCompleted}
                        onChange={() => handleToggleComplete(r.id, r.isCompleted)}
                        className="form-checkbox h-5 w-5 text-yellow-600 rounded"
                      />
                    </td>
                    <td className="py-3 px-6 text-right">
                      <button onClick={() => handleDelete(r.id)} className="text-red-500 hover:text-red-700 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 112 0v6a1 1 0 11-2 0V8z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-center text-gray-500">No reminders set yet.</p>
        )}
      </div>
    </div>
  );
};

export default App;